"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const default_ilp_client_1 = __importDefault(require("./default-ilp-client"));
class IlpClient {
    constructor(grpcURL, forceWeb = false) {
        this.decoratedClient = default_ilp_client_1.default.defaultIlpClientWithEndpoint(grpcURL, forceWeb);
    }
    /**
     * Get the balance of the specified account on the connector.
     *
     * @param accountId The account ID to get the balance for.
     * @param bearerToken Optional auth token. If using node network client, bearerToken must be supplied, otherwise
     *        it will be picked up from a cookie.
     * @return A {@link GetBalanceResponse} with balance information of the specified account
     */
    async getBalance(accountId, bearerToken) {
        return this.decoratedClient.getBalance(accountId, bearerToken);
    }
    /**
     * Send the given amount of XRP from the source wallet to the destination address.
     *
     * @param amount A `BigInteger`, number or numeric string representing the number of drops to send.
     * @param paymentPointer the payment pointer to receive funds
     * @param sender the ILP account sending the funds
     * @param bearerToken Optional auth token. If using node network client, bearerToken must be supplied, otherwise
     *        it will be picked up from a cookie.
     * @returns A promise which resolves to a `SendPaymentResponse` of the original amount, the amount sent
     *        in the senders denomination, and the amount that was delivered to the recipient in their denomination, as
     *        well as if the payment was successful
     */
    async send(amount, paymentPointer, sender, bearerToken) {
        return this.decoratedClient.send(amount, paymentPointer, sender, bearerToken);
    }
}
exports.default = IlpClient;
//# sourceMappingURL=ilp-client.js.map