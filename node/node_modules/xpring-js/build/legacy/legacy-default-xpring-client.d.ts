import { Wallet } from 'xpring-common-js';
import { BigInteger } from 'big-integer';
import RawTransactionStatus from '../raw-transaction-status';
import { LegacyNetworkClient } from './legacy-network-client';
import { XpringClientDecorator } from '../xpring-client-decorator';
import TransactionStatus from '../transaction-status';
/**
 * Error messages from XpringClient.
 */
export declare class LegacyXpringClientErrorMessages {
    static readonly malformedResponse = "Malformed Response.";
    static readonly signingFailure = "Unable to sign the transaction";
    static readonly xAddressRequired = "Please use the X-Address format. See: https://xrpaddress.info/.";
}
/**
 * DefaultXpringClient is a client which interacts with the Xpring platform.
 */
declare class LegacyDefaultXpringClient implements XpringClientDecorator {
    private readonly networkClient;
    /**
     * Create a new DefaultXpringClient.
     *
     * The DefaultXpringClient will use gRPC to communicate with the given endpoint.
     *
     * @param grpcURL The URL of the gRPC instance to connect to.
     * @param forceWeb If `true`, then we will use the gRPC-Web client even when on Node. Defaults to false. This is mainly for testing and in the future will be removed when we have browser testing.
     */
    static defaultXpringClientWithEndpoint(grpcURL: string, forceWeb?: boolean): LegacyDefaultXpringClient;
    /**
     * Create a new DefaultXpringClient with a custom network client implementation.
     *
     * In general, clients should prefer to call `xpringClientWithEndpoint`. This constructor is provided to improve testability of this class.
     *
     * @param networkClient A network client which will manage remote RPCs to Rippled.
     */
    constructor(networkClient: LegacyNetworkClient);
    /**
     * Retrieve the balance for the given address.
     *
     * @param address The X-Address to retrieve a balance for.
     * @returns A `BigInteger` representing the number of drops of XRP in the account.
     */
    getBalance(address: string): Promise<BigInteger>;
    /**
     * Retrieve the transaction status for a given transaction hash.
     *
     * @param transactionHash The hash of the transaction.
     * @returns The status of the given transaction.
     */
    getTransactionStatus(transactionHash: string): Promise<TransactionStatus>;
    /**
     * Send the given amount of XRP from the source wallet to the destination address.
     *
     * @param drops A `BigInteger`, number or numeric string representing the number of drops to send.
     * @param destination A destination address to send the drops to.
     * @param sender The wallet that XRP will be sent from and which will sign the request.
     * @returns A promise which resolves to a string representing the hash of the submitted transaction.
     */
    send(amount: BigInteger | number | string, destination: string, sender: Wallet): Promise<string>;
    getLastValidatedLedgerSequence(): Promise<number>;
    getRawTransactionStatus(transactionHash: string): Promise<RawTransactionStatus>;
    private getAccountInfo;
    private getFee;
    accountExists(address: string): Promise<boolean>;
}
export default LegacyDefaultXpringClient;
