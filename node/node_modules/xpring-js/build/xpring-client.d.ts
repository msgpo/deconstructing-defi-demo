import { Wallet } from 'xpring-common-js';
import { BigInteger } from 'big-integer';
import TransactionStatus from './transaction-status';
/**
 * XpringClient is a client which interacts with the Xpring platform.
 */
declare class XpringClient {
    private readonly decoratedClient;
    /**
     * Create a new XpringClient.
     *
     * The XpringClient will use gRPC to communicate with the given endpoint.
     *
     * @param grpcURL The URL of the gRPC instance to connect to.
     * @param useNewProtocolBuffers If `true`, then the new protocol buffer implementation from rippled will be used. Defaults to false.
     * @param forceWeb If `true`, then we will use the gRPC-Web client even when on Node. Defaults to false. This is mainly for testing and in the future will be removed when we have browser testing.
     */
    constructor(grpcURL: string, useNewProtocolBuffers?: boolean, forceWeb?: boolean);
    /**
     * Retrieve the balance for the given address.
     *
     * @param address The X-Address to retrieve a balance for.
     * @returns A `BigInteger` representing the number of drops of XRP in the account.
     */
    getBalance(address: string): Promise<BigInteger>;
    /**
     * Retrieve the transaction status for a given transaction hash.
     *
     * @param transactionHash The hash of the transaction.
     * @returns The status of the given transaction.
     */
    getTransactionStatus(transactionHash: string): Promise<TransactionStatus>;
    /**
     * Send the given amount of XRP from the source wallet to the destination address.
     *
     * @param drops A `BigInteger`, number or numeric string representing the number of drops to send.
     * @param destination A destination address to send the drops to.
     * @param sender The wallet that XRP will be sent from and which will sign the request.
     * @returns A promise which resolves to a string representing the hash of the submitted transaction.
     */
    send(amount: BigInteger | number | string, destination: string, sender: Wallet): Promise<string>;
    /**
     * Check if an address exists on the XRP Ledger.
     *
     * @param address The address to check the existence of.
     * @returns A boolean if the account is on the ledger.
     */
    accountExists(address: string): Promise<boolean>;
}
export default XpringClient;
