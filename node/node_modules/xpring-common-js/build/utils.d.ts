/**
 * A simple property bag which contains components of a classic address. Components contained in this object are neither sanitized or validated.
 */
export interface ClassicAddress {
    /** A classic address. */
    address: string;
    /** An optional tag. */
    tag?: number;
    /** A boolean indicating whether this address is for use on a test network. */
    test: boolean;
}
declare class Utils {
    /**
     * Validate that the given string is a valid address for the XRP Ledger.
     *
     * This function returns true for both X-addresses and classic addresses.
     * @see https://xrpaddress.info/
     *
     * @param address An address to check.
     * @returns True if the address is valid, otherwise false.
     */
    static isValidAddress(address: string): boolean;
    /**
     * Validate whether the given string is a valid X-address for the XRP Ledger.
     *
     * @see https://xrpaddress.info/
     *
     * @param address An address to check.
     * @returns True if the address is a valid X-address, otherwise false.
     */
    static isValidXAddress(address: string): boolean;
    /**
     * Validate whether the given string is a valid classic address for the XRP Ledger.
     *
     * @see https://xrpaddress.info/
     *
     * @param address An address to check.
     * @returns True if the address is a valid classic address, otherwise false.
     */
    static isValidClassicAddress(address: string): boolean;
    /**
     * Encode the given classic address and tag into an x-address.
     *
     * @see https://xrpaddress.info/
     *
     * @param classicAddress A classic address to encode.
     * @param tag An optional tag to encode.
     * @param test Whether the address is for use on a test network, defaults to `false`.
     * @returns A new x-address if inputs were valid, otherwise undefined.
     */
    static encodeXAddress(classicAddress: string, tag: number | undefined, test?: boolean): string | undefined;
    /**
     * Decode a `ClassicAddress` from a given x-address.
     *
     * @see https://xrpaddress.info/
     *
     * @param xAddress The xAddress to decode.
     * @returns A `ClassicAddress`
     */
    static decodeXAddress(xAddress: string): ClassicAddress | undefined;
    /**
     * Convert the given byte array to a hexadecimal string.
     *
     * @param bytes An array of bytes
     * @returns An encoded hexadecimal string.
     */
    static toHex(bytes: Uint8Array): string;
    /**
     * Convert the given hexadecimal string to a byte array.
     *
     * @param hex A hexadecimal string.
     * @returns A decoded byte array.
     */
    static toBytes(hex: string): Uint8Array;
    /**
     * Convert the given transaction blob to a transaction hash.
     *
     * @param transactionBlobHex A hexadecimal encoded transaction blob.
     * @returns A hex encoded hash if the input was valid, otherwise undefined.
     */
    static transactionBlobToTransactionHash(transactionBlobHex: string): string | undefined;
    /**
     * Compute the SHA512 half hash of the given bytes.
     *
     * @param input The input to hash.
     * @returns The hash of the input.
     */
    private static sha512Half;
    /**
     * Check if the given string is valid hex.
     *
     * @param input The input to check.
     * @returns true if the input is valid hex, otherwise false.
     */
    static isHex(input: string): boolean;
}
export default Utils;
