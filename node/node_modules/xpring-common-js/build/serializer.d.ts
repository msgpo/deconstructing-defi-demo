import { Transaction as LegacyTransaction } from './generated/legacy/transaction_pb';
import { Transaction } from './generated/org/xrpl/rpc/v1/transaction_pb';
interface TransactionJSON {
    Account: string;
    Fee: string;
    LastLedgerSequence: number;
    Sequence: number;
    SigningPubKey: string;
    TxnSignature?: string;
}
/**
 * Provides functionality to serialize from protocol buffers to JSON objects.
 */
declare class Serializer {
    /**
     * Convert a Transaction to a JSON representation.
     *
     * @param {proto.Transaction} transaction A Transaction to convert.
     * @param signature An optional hex encoded signature to include in the transaction.
     * @returns {Object} The Transaction as JSON.
     */
    static transactionToJSON(transaction: Transaction, signature?: string): TransactionJSON | undefined;
    /**
     * Convert a Payment to a JSON representation.
     *
     * @param {proto.Payment} payment The Payment to convert.
     * @returns {Object} The Payment as JSON.
     */
    private static paymentToJSON;
    /**
     * Convert an XRPDropsAmount to a JSON representation.
     *
     * @param xrpDropsAmount The XRPAmount to convert.
     * @returns The XRPAmount as JSON.
     */
    private static xrpAmountToJSON;
    /**
     * Convert a Transaction to a JSON representation.
     *
     * @param {proto.Transaction} transaction A Transaction to convert.
     * @returns {Object} The Transaction as JSON.
     */
    static legacyTransactionToJSON(transaction: LegacyTransaction): TransactionJSON | undefined;
    /**
     * Convert a Payment to a JSON representation.
     *
     * @param payment The Payment to convert.
     * @returns The Payment as JSON.
     */
    private static legacyPaymentToJSON;
    /**
     * Convert an XRPAmount to a JSON representation.
     *
     * @param {proto.XRPAmount} xrpAmount The XRPAmount to convert.
     * @return {String} The XRPAmount as JSON.
     */
    private static legacyXRPAmountToJSON;
}
export default Serializer;
