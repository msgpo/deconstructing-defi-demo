/// <reference types="node" />
/**
 * An object which contains artifacts from generating a new wallet.
 */
export interface WalletGenerationResult {
    /** The newly generated Wallet. */
    wallet: Wallet;
    /** The mnemonic used to generate the wallet. */
    mnemonic: string;
    /** The derivation path used to generate the wallet. */
    derivationPath: string;
}
/**
 * A wallet object that has an address and keypair.
 */
declare class Wallet {
    private readonly publicKey;
    private readonly privateKey;
    private readonly test;
    /**
     * @returns {String} The default derivation path.
     */
    static getDefaultDerivationPath(): string;
    /**
     * Generate a new wallet hierarchical deterministic wallet with a random mnemonic and
     * default derivation path.
     *
     * Secure random number generation is used when entropy is ommitted and when the runtime environment has the necessary support. Otherwise, an error is thrown. Runtime environments that do not have secure random number generation should pass their own buffer of entropy.
     *
     * @param entropy A optional hex string of entropy.
     * @param test Whether the address is for use on a test network, defaults to `false`.
     * @returns Artifacts from the wallet generation.
     */
    static generateRandomWallet(entropy?: string | undefined, test?: boolean): WalletGenerationResult | undefined;
    /**
     * Generate a new hierarchical deterministic wallet from a mnemonic and derivation path.
     *
     * @param mnemonic The given mnemonic for the wallet.
     * @param derivationPath The given derivation path to use. If undefined, the default path is used.
     * @param test Whether the address is for use on a test network, defaults to `false`.
     * @returns A new wallet from the given mnemonic if the mnemonic was valid, otherwise undefined.
     */
    static generateWalletFromMnemonic(mnemonic: string, derivationPath?: string, test?: boolean): Wallet | undefined;
    /**
     * Generate a new hierarchical deterministic wallet from a seed and derivation path.
     *
     * @param seed The given seed for the wallet.
     * @param derivationPath The given derivation path to use. If undefined, the default path is used.
     * @param test Whether the address is for use on a test network, defaults to `false`.
     * @returns A new wallet from the given mnemonic if the mnemonic was valid, otherwise undefined.
     */
    static generateHDWalletFromSeed(seed: Buffer, derivationPath?: string, test?: boolean): Wallet | undefined;
    /**
     * Generate a new wallet from the given seed.
     *
     * @param seed The given seed for the wallet.
     * @param test Whether the address is for use on a test network, defaults to `false`.
     * @returns A new wallet from the given seed, or undefined if the seed was invalid.
     */
    static generateWalletFromSeed(seed: string, test?: boolean): Wallet | undefined;
    /**
     * Create a new Wallet object.
     *
     * @param publicKey The given public key for the wallet.
     * @param privateKey The given private key for the wallet.
     * @param test Whether the address is for use on a test network, defaults to `false`.
     */
    constructor(publicKey: string, privateKey: string, test?: boolean);
    /**
     * @returns {String} A string representing the public key for the wallet.
     */
    getPublicKey(): string;
    /**
     * @returns {String} A string representing the private key for the wallet.
     */
    getPrivateKey(): string;
    /**
     * @returns {String} A string representing the address of the wallet.
     */
    getAddress(): string;
    /**
     * Sign an arbitrary hex string.
     *
     * @param {String} hex An arbitrary hex string to sign.
     * @returns {String} A signature in hexadecimal format if the input was valid, otherwise undefined.
     */
    sign(hex: string): string | undefined;
    /**
     * Verify a signature is valid for a message.
     *
     * @param {String} message A message in hex format.
     * @param {String} signature A signature in hex format.
     * @returns {Boolean} True if the signature is valid, otherwise false.
     */
    verify(message: string, signature: string): boolean;
    private static hexFromBuffer;
}
export default Wallet;
